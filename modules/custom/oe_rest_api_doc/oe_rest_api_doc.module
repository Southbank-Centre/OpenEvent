<?php

/**
 * Implements hook_menu_alter()
 */
function oe_rest_api_doc_menu_alter(&$items) {
  $items['api/doc']['title'] = variable_get('site_name') . ' API Documentation';
  $items['api/doc']['page callback'] = 'OE_rest_api_doc_page';
}

/**
 * API documentation page.
 */
function oe_rest_api_doc_page($format = '') {
  $resources = restws_get_resource_info();
  ksort($resources);
  $formats = restws_get_format_info();

  // Display format links if one hasn't been specified in the URL

  foreach ($formats as $name => $format_info) {
    $links[] = l($format_info['label'], 'api/doc/' . $name);
  }
  $page['header']['#markup'] = implode(' | ', $links);

  if (!isset($formats[$format])) {
    return $page;
  }


  // Build documentation markup
  $page['body']['#markup'] =  '';
  $page['body']['#markup'] .= '<ul id="api-documentation-nav">';
  foreach ($resources as $type => $resource) {
    // Add an html ID to each resource
    $resources[$type]['html_id'] = drupal_html_id($resource['label']);

    // Add resources to the menu
    $page['body']['#markup'] .= '<li><a href="#' . $resources[$type]['html_id'] . '">' . $resource['label'] . '</a></li>';
  }
  $page['body']['#markup'] .= '</ul>';

  foreach ($resources as $type => $resource) {
    // Bundle heading
    $page['body']['#markup'] .= '<h2 id="' . $resource['html_id'] . '">' . $resource['label'] . '</h2>';

    // Single item API call
    $page['body']['#markup'] .= '<h3><code>/api/' . $type . '/&lt;ID&gt;.' . $format . '</code></h3>';
    $page['body']['#markup'] .= '<p>Returns a single ' . $type . ' item based on the <ID> passed in.</p>';
    $page['body']['#markup'] .= '<h4>Example call</h4>';
    $page['body']['#markup'] .= '<p>This call will return the ' . $type . ' item whose ID is 12.</p>';
    $page['body']['#markup'] .= '<p><code>/api/' . $type . '/12.' . $format . '</code></p>';

    // List API call
    $page['body']['#markup'] .= '<h3><code>/api/' . $type . '.' . $format . '</code></h3>';
    $page['body']['#markup'] .= '<p>Returns a list of ' . $type . ' items.</p>';
    $page['body']['#markup'] .= '<h4>Filtering</h4>';
    $page['body']['#markup'] .= '<p>You can filter on any of properties listed below, in the following way:</p>';
    $page['body']['#markup'] .= '<p><code>/api/' . $type . '.' . $format . '?&lt;propertyName&gt;=&lt;propertyValue&gt;</code></p>';
    $property_rows = array();
    $controller = restws_resource_controller($type);
    foreach ($controller->propertyInfo() as $property => $property_info) {
      if (!empty($property_info['computed']) || empty($property_info['type'])) {
        continue;
      }
      $required = FALSE;
      $options = NULL;
      if (is_a($controller, 'RestWSEntityResourceController')) {
        $entityInfo = entity_get_info($type);
        $entityPropertyInfo = entity_get_all_property_info($type);
        if ($entityInfo['entity keys']['bundle'] == $property) {
          $required = TRUE;
        }
        if (!empty($entityPropertyInfo[$property]['required'])) {
          $required = TRUE;
        }

        if (!empty($entityPropertyInfo[$property]['options list'])) {
          // KLUDGE: returns errors but works. Why?
          $options = @call_user_func($entityPropertyInfo[$property]['options list']);
        }
      }
      $property_rows[] = array(
        $property,
        $property_info['type'] . ($options ? theme('item_list', array('items' => array_keys($options), 'title' => t('Allowed values'))) : ''),
      );
    }
    $properties_table = theme('table', array('rows' => $property_rows, 'header' => array('Property', 'Type')));
    $page['body']['#markup'] .= $properties_table;
    $page['body']['#markup'] .= '<h4>Sorting</h4>';
    $page['body']['#markup'] .= '<p>You can sort by passing the <code>sort</code> parameter:</p>';
    $page['body']['#markup'] .= '<p><code>/api/' . $type . '.' . $format . '?sort=&lt;propertyName&gt;</code></p>';
    $page['body']['#markup'] .= '<p>You can also specify the sort direction (<code>ASC</code> | <code>DES</code>):</p>';
    $page['body']['#markup'] .= '<p><code>/api/' . $type . '.' . $format . '?sort=&lt;propertyName&gt;&direction=DES</code></p>';
    $page['body']['#markup'] .= '<h4>Pagination</h4>';
    $page['body']['#markup'] .= '<p>You can specify an offset to exclude the first N results:</p>';
    $page['body']['#markup'] .= '<p><code>/api/' . $type . '.' . $format . '?offset=&lt;N&gt;</code></p>';
    $page['body']['#markup'] .= '<p>You can also specify a limit to the number of results returned by the call:</p>';
    $page['body']['#markup'] .= '<p><code>/api/' . $type . '.' . $format . '?limit=&lt;N&gt;</code></p>';
    $page['body']['#markup'] .= '<p>There is a hard limit of ' . variable_get('restws_query_max_limit', 100) . ' items per API call, which cannot be exceeded.</p>';

  }

  return $page;
}